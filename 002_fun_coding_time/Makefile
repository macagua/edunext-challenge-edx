.PHONY: clean coverage docs help quality requirements test test-all upgrade validate

.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"
PROJECT_NAME = paymentprocessor

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	rm -fr build/
	rm -fr dist/
	rm -fr htmlcov/
	rm -fr *.egg-info

coverage: clean ## generate and view HTML coverage report
	coverage erase
	coverage run paymentprocessor/manage.py test -v 2
	coverage html
	$(BROWSER) htmlcov/index.html

erase: clean ## remove everthing, but the code.
	rm -fr venv/
	git clean -fx

diff_cover: test
	diff-cover coverage.xml

distros: ## build distribution for release at PyPI.
	python ./setup.py -v build
	python ./setup.py -v sdist
	python ./setup.py -v bdist_wheel

docs: ## generate Sphinx HTML documentation, including API docs
	pip install -qr $(PROJECT_NAME)/requirements/doc.txt --exists-action w --timeout 120
	tox -e docs
	$(BROWSER) docs/_build/html/index.html

upgrade: ## update the paymentprocessor/requirements/*.txt files with the latest packages satisfying paymentprocessor/requirements/*.in
	pip install -q pip-tools --timeout 120
	pip-compile -v --upgrade -o $(PROJECT_NAME)/requirements/dev.txt $(PROJECT_NAME)/requirements/base.in $(PROJECT_NAME)/requirements/dev.in $(PROJECT_NAME)/requirements/quality.in
	pip-compile -v --upgrade -o $(PROJECT_NAME)/requirements/doc.txt $(PROJECT_NAME)/requirements/base.in $(PROJECT_NAME)/requirements/doc.in
	pip-compile -v --upgrade -o $(PROJECT_NAME)/requirements/quality.txt $(PROJECT_NAME)/requirements/quality.in
	pip-compile -v --upgrade -o $(PROJECT_NAME)/requirements/test.txt $(PROJECT_NAME)/requirements/base.in $(PROJECT_NAME)/requirements/test.in
	pip-compile -v --upgrade -o $(PROJECT_NAME)/requirements/travis.txt $(PROJECT_NAME)/requirements/travis.in
	# Let tox control the Django version for tests
	sed '/django==/d' $(PROJECT_NAME)/requirements/test.txt > $(PROJECT_NAME)/requirements/test.tmp
	mv $(PROJECT_NAME)/requirements/test.tmp $(PROJECT_NAME)/requirements/test.txt

quality: ## check coding style with pycodestyle and pylint
	tox -e quality

requirements: ## install development environment requirements
	pip install -qr $(PROJECT_NAME)/requirements/dev.txt --exists-action w --timeout 120
	pip-sync $(PROJECT_NAME)/requirements/dev.txt $(PROJECT_NAME)/requirements/private.* $(PROJECT_NAME)/requirements/test.txt

migrate:
	python $(PROJECT_NAME)/manage.py migrate

bootstrap: upgrade requirements migrate ## bootstrap your environment is ready
	@echo "-------------------------"
	@echo "Your environment is ready"
	@echo "Now run: make run"

run: ## run the django run server
	python $(PROJECT_NAME)/manage.py runserver 0.0.0.0:8011

test: clean ## run tests in the current virtualenv
	pip install -qr $(PROJECT_NAME)/requirements/test.txt --exists-action w --timeout 120
	pytest --suppress-no-test-exit-code

test-all: ## run tests on every supported Python/Django combination
	pip install -qr $(PROJECT_NAME)/requirements/quality.txt --exists-action w --timeout 120
	tox -e quality
	# tox

validate: quality test ## run tests and quality checks
